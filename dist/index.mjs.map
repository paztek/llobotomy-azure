{"version":3,"file":"index.mjs","sources":["../src/assistant/assistant.ts","../src/thread/message.converter.ts","../src/thread/thread.ts"],"sourcesContent":["import type {\n    ChatRequestMessage,\n    ChatRequestSystemMessage,\n    GetChatCompletionsOptions,\n    OpenAIClient,\n} from '@azure/openai';\nimport type { ChatCompletionsToolDefinition } from '@azure/openai/types/src/models/models';\nimport { Readable } from 'stream';\n\nexport interface AssistantCreateParams {\n    client: OpenAIClient;\n    instructions: string;\n    tools: ChatCompletionsToolDefinition[];\n    deployment: string;\n}\n\nexport class Assistant {\n    public readonly client: OpenAIClient;\n\n    private readonly instructions: string;\n    private readonly tools: ChatCompletionsToolDefinition[];\n    private readonly deployment: string;\n\n    constructor(params: AssistantCreateParams) {\n        this.client = params.client;\n        this.instructions = params.instructions;\n        this.tools = params.tools;\n        this.deployment = params.deployment;\n    }\n\n    listChatCompletions(messages: ChatRequestMessage[]): Readable {\n        // Prepend the messages with our instructions as a \"system\" message\n        const systemMessage: ChatRequestSystemMessage = {\n            role: 'system',\n            content: this.instructions,\n        };\n        messages = [systemMessage, ...messages];\n\n        const options: GetChatCompletionsOptions = {};\n\n        if (this.tools.length > 0) {\n            options.tools = this.tools;\n        }\n\n        const completions = this.client.listChatCompletions(\n            this.deployment,\n            messages,\n            options,\n        );\n\n        return Readable.from(completions, {\n            objectMode: true,\n        });\n    }\n}\n","import type {\n    ChatRequestMessage,\n    ChatRequestSystemMessage,\n    ChatRequestAssistantMessage,\n    ChatRequestToolMessage,\n    ChatRequestUserMessage,\n} from '@azure/openai';\nimport type { ChatMessage } from '../message';\nimport type {\n    ChatRequestSystemMessageWithMetadata,\n    ChatRequestToolMessageWithMetadata,\n    ChatRequestUserMessageWithMetadata,\n    ChatResponseMessageWithMetadata,\n} from '../message';\n\nexport class ThreadMessageConverter {\n    /**\n     * Convert the mix of ChatRequestMessages and ChatResponseMessages to ChatRequestMessages only\n     * so they can be sent again to the LLM.\n     */\n    convert(messages: ChatMessage[]): ChatRequestMessage[] {\n        return messages.map((m) => {\n            switch (m.role) {\n                case 'system': {\n                    const systemMessage =\n                        m as ChatRequestSystemMessageWithMetadata;\n                    return {\n                        role: 'system',\n                        content: systemMessage.content,\n                    } as ChatRequestSystemMessage;\n                }\n                case 'user': {\n                    const userMessage = m as ChatRequestUserMessageWithMetadata;\n                    return {\n                        role: 'user',\n                        content: userMessage.content,\n                        name: userMessage.name,\n                    } as ChatRequestUserMessage;\n                }\n                case 'tool': {\n                    const toolMessage = m as ChatRequestToolMessageWithMetadata;\n                    return {\n                        role: 'tool',\n                        content: toolMessage.content,\n                        toolCallId: toolMessage.toolCallId,\n                    } as ChatRequestToolMessage;\n                }\n                case 'assistant': {\n                    const assistantMessage =\n                        m as ChatResponseMessageWithMetadata;\n                    return {\n                        role: 'assistant',\n                        content: assistantMessage.content,\n                        toolCalls: assistantMessage.toolCalls,\n                    } as ChatRequestAssistantMessage;\n                }\n                default:\n                    throw new Error(`Unknown message role ${m.role}`);\n            }\n        });\n    }\n}\n","import type {\n    ChatCompletions,\n    ChatCompletionsToolCall,\n    ChatRequestMessage,\n    ChatResponseMessage,\n} from '@azure/openai';\nimport EventEmitter from 'events';\nimport { Readable } from 'stream';\nimport { Assistant } from '../assistant';\nimport type {\n    ChatMessage,\n    ChatRequestMessageWithMetadata,\n    ChatRequestToolMessageWithMetadata,\n} from '../message';\nimport { ThreadMessageConverter } from './message.converter';\n\nexport class Thread extends EventEmitter {\n    private _stream: Readable | null = null;\n    private readonly converter = new ThreadMessageConverter();\n\n    constructor(private readonly messages: ChatMessage[] = []) {\n        super();\n    }\n\n    get stream(): Readable | null {\n        if (!this._stream) {\n            return null;\n        }\n\n        return this._stream;\n    }\n\n    addMessage(message: ChatRequestMessageWithMetadata): void {\n        this.doAddMessage(message);\n    }\n\n    run(assistant: Assistant): void {\n        this._stream = new Readable({\n            read: () => {},\n        });\n        this.doRun(assistant);\n    }\n\n    private doRun(assistant: Assistant): void {\n        this.emitImmediate('in_progress');\n\n        const messages = this.converter.convert(this.messages);\n\n        const stream = assistant.listChatCompletions(messages);\n\n        let content: string | null = null;\n        const toolCalls: ChatCompletionsToolCall[] = [];\n\n        stream.on('data', (completion: ChatCompletions) => {\n            const choice = completion.choices[0];\n            if (!choice) {\n                throw new Error('No completions returned');\n            }\n\n            const delta = choice.delta;\n            if (!delta) {\n                throw new Error('No delta returned');\n            }\n\n            if (delta.content) {\n                content = content ? content + delta.content : delta.content;\n\n                // Write also to the stream of the thread\n                if (!this._stream) {\n                    throw new Error('No stream available');\n                }\n                this._stream?.push(delta.content);\n            }\n\n            // Merge toolCalls\n            if (delta.toolCalls) {\n                for (const toolCall of delta.toolCalls) {\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    const index = toolCall['index']; // Not typed yet by the @azure/openai package\n                    const existingToolCall = toolCalls[index];\n\n                    if (existingToolCall) {\n                        existingToolCall.function.arguments +=\n                            toolCall.function.arguments;\n                    } else {\n                        toolCalls.push({\n                            type: toolCall.type,\n                            function: toolCall.function,\n                            id: toolCall.id,\n                        });\n                    }\n                }\n            }\n\n            if (choice.finishReason === null) {\n                return;\n            }\n\n            const finalToolCalls = [...toolCalls];\n\n            const message: ChatResponseMessage = {\n                role: 'assistant',\n                content,\n                toolCalls: finalToolCalls,\n            };\n\n            content = null;\n            toolCalls.splice(0, toolCalls.length);\n\n            this.doAddMessage(message);\n\n            switch (choice.finishReason) {\n                case 'stop':\n                    this._stream?.push(null);\n                    this.emitImmediate('completed');\n                    break;\n                case 'tool_calls': {\n                    const requiredAction = new RequiredAction(finalToolCalls);\n                    requiredAction.on(\n                        'submitting',\n                        (toolOutputs: ToolOutput[]) => {\n                            // Adds the tool outputs to the messages\n                            for (const toolOutput of toolOutputs) {\n                                const message: ChatRequestToolMessageWithMetadata =\n                                    {\n                                        role: 'tool',\n                                        content: JSON.stringify(\n                                            toolOutput.value,\n                                        ),\n                                        toolCallId: toolOutput.callId,\n                                    };\n                                if (toolOutput.metadata !== void 0) {\n                                    message.metadata = toolOutput.metadata;\n                                }\n                                this.doAddMessage(message);\n                            }\n\n                            this.doRun(assistant);\n                        },\n                    );\n                    this.emitImmediate('requires_action', requiredAction);\n                    break;\n                }\n                default:\n                    throw new Error(\n                        `Unknown finish reason ${choice.finishReason}`,\n                    );\n            }\n        });\n    }\n\n    private doAddMessage(\n        message: ChatRequestMessage | ChatResponseMessage,\n    ): void {\n        this.messages.push(message);\n\n        this.emitImmediate('message', message);\n\n        if (isChatRequestMessage(message)) {\n            this.emitImmediate('message:request', message);\n        } else {\n            this.emitImmediate('message:response', message);\n        }\n    }\n\n    private emitImmediate(event: string, ...args: unknown[]): void {\n        setImmediate(() => {\n            this.emit(event, ...args);\n        });\n    }\n}\n\nexport class RequiredAction extends EventEmitter {\n    constructor(public readonly toolCalls: ChatCompletionsToolCall[]) {\n        super();\n    }\n\n    submitToolOutputs(toolOutputs: ToolOutput[]): void {\n        this.emit('submitting', toolOutputs);\n    }\n}\n\nexport interface ToolOutput {\n    callId: string;\n    value: unknown;\n    metadata?: unknown;\n}\n\nexport function isChatResponseMessage(\n    m: ChatRequestMessage | ChatResponseMessage,\n): m is ChatResponseMessage {\n    return 'toolCalls' in m;\n}\n\nexport function isChatRequestMessage(\n    m: ChatRequestMessage | ChatResponseMessage,\n): m is ChatRequestMessage {\n    return !isChatResponseMessage(m);\n}\n"],"names":[],"mappings":"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"}